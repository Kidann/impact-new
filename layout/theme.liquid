{%- comment -%}
------------------------------------------------------------------------------------------------------------------------
NOTE TO DEVELOPERS: welcome to Impact theme! We hope that you will enjoy editing this theme as much as we did for
  developing it. We have put a lot of work to make this theme as developer friendly as possible by offering you
  hooks to integrate into critical parts of the theme. You will find the complete technical documentation (including
  all events, dependencies...) in the "documentation.txt" file, located in the Assets folder.
------------------------------------------------------------------------------------------------------------------------
{%- endcomment -%}

<!doctype html>

<html lang="{{ request.locale.iso_code }}" dir="{% render 'direction' %}">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, maximum-scale=1.0">
    <meta name="theme-color" content="{{ settings.header_background }}">

    <title>{% if page_title == blank %}{{ shop.name }}{% else %}{{ page_title }}{% if current_page != 1 %} &ndash; {{ 'general.page' | t: page: current_page }}{% endif %}{% endif %}</title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon -%}
      <link rel="shortcut icon" href="{{ settings.favicon | image_url: width: 96 }}">
      <link rel="apple-touch-icon" href="{{ settings.favicon | image_url: width: 180 }}">
    {%- endif -%}

    {%- comment -%}Few prefetch to increase performance on commonly used third-parties{%- endcomment -%}
    <link rel="preconnect" href="https://cdn.shopify.com">
    <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    <link rel="dns-prefetch" href="https://productreviews.shopifycdn.com">

    {%- unless settings.heading_font.system? -%}
      <link rel="preload" href="{{ settings.heading_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- unless settings.text_font.system? -%}
      <link rel="preload" href="{{ settings.text_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- render 'social-meta-tags' -%}
    {%- render 'microdata-schema' -%}
    {%- render 'css-variables' -%}
    {%- render 'js-variables' -%}

    <script>
      if (!(HTMLScriptElement.supports && HTMLScriptElement.supports('importmap'))) {
        const importMapPolyfill = document.createElement('script');
        importMapPolyfill.async = true;
        importMapPolyfill.src = "{{ 'es-module-shims.min.js' | asset_url }}";

        document.head.appendChild(importMapPolyfill);
      }
    </script>

    <script type="importmap">
      {%- comment -%}On Safari 16.3 and lower, a polyfill is used to load importmap{%- endcomment -%}
      {
        "imports": {
          "vendor": "{{ 'vendor.min.js' | asset_url }}",
          "theme": "{{ 'theme.js' | asset_url }}",
          "photoswipe": "{{ 'photoswipe.min.js' | asset_url }}"
        }
      }
    </script>

    <script type="module" src="{{ 'vendor.min.js' | asset_url }}"></script>
    <script type="module" src="{{ 'theme.js' | asset_url }}"></script>

    {{ content_for_header }}

    {{- 'theme.css' | asset_url | stylesheet_tag: preload: true -}}
  </head>

  <body class="{% if settings.show_page_transition %}page-transition{% endif %} {% if settings.zoom_image_on_hover %}zoom-image--enabled{% endif %}">
    {%- render 'shadow-dom-templates' -%}

    <a href="#main" class="skip-to-content sr-only">{{ 'general.accessibility.skip_to_content' | t }}</a>

    {%- if request.page_type != 'password' -%}
      {%- sections 'header-group' -%}
      {%- sections 'overlay-group' -%}

      {%- if settings.cart_type == 'popover' -%}
        <cart-notification-drawer open-from="bottom" class="quick-buy-drawer drawer"></cart-notification-drawer>
      {%- endif -%}
    {%- endif -%}

    {%- if request.page_type == 'customers/account' or request.page_type == 'customers/order' or request.page_type == 'customers/addresses' -%}
      {%- section 'account-banner' -%}
    {%- endif -%}

    <main role="main" id="main" class="anchor">
      {{ content_for_layout }}

      {%- comment -%}
      IMPLEMENTATION NOTE: due to the very complex logic of margin/padding collapsing in Impact, the footer group is
      added into the main element to ensure that dynamic sections added into the footer group are properly laid out.
      {%- endcomment -%}
      {%- if request.page_type != 'password' -%}
        {%- sections 'footer-group' -%}
      {%- endif -%}
    </main>
    <script>
      const track = document.querySelector('.carousel-track');
      const dots = document.querySelectorAll('.dot');
    
      track.addEventListener('scroll', () => {
        const scrollLeft = track.scrollLeft;
        const slideWidth = track.clientWidth;
    
        const index = Math.round(scrollLeft / slideWidth);
    
        dots.forEach(dot => dot.classList.remove('active'));
        if (dots[index]) dots[index].classList.add('active');
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const slider = document.querySelector(".testimonial-slider");
        const slides = document.querySelectorAll(".testimonial-slide");
        const dots = document.querySelectorAll(".dot");
        const leftArrow = document.querySelector(".arrow.left");
        const rightArrow = document.querySelector(".arrow.right");
    
        let currentIndex = -3;
    
        function goToSlide(index) {
          if (index < 0) index = 0;
          if (index >= slides.length) index = slides.length - 1;
    
          slider.style.transform = `translateX(-${index * 100}%)`;
          dots.forEach(dot => dot.classList.remove("active"));
          if (dots[index]) dots[index].classList.add("active");
    
          currentIndex = index;
        }
    
        // Dot navigation
        dots.forEach(dot => {
          dot.addEventListener("click", () => {
            const index = parseInt(dot.getAttribute("data-index"));
            goToSlide(index);
          });
        });
    
        // Arrow navigation
        leftArrow?.addEventListener("click", () => {
          goToSlide(currentIndex - 1);
        });
    
        rightArrow?.addEventListener("click", () => {
          goToSlide(currentIndex + 1);
        });
    
        // Touch (swipe) navigation
        let startX = 0;
        slider?.addEventListener("touchstart", (e) => {
          startX = e.touches[0].clientX;
        });
    
        slider?.addEventListener("touchend", (e) => {
          const endX = e.changedTouches[0].clientX;
          const delta = endX - startX;
    
          if (delta > 50) goToSlide(currentIndex - 1);
          else if (delta < -50) goToSlide(currentIndex + 1);
        });
    
        // Initialize first slide
        goToSlide(0);
      });
    </script>
  </body>
</html>